//
//  ListArticleInteractor.swift
//  ListArticleCap
//
//  Created by Chris on 13/05/2020.
//  Copyright (c) 2020 Chris78. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListArticleBusinessLogic {
    func fetchArticles(request: ListArticle.Fetch.Request)
    func filterArticles(request: ListArticle.Fetch.Request)
    //var filteredArticles: [Article] { get set }
}

protocol ListArticleDataStore {
    var articles: [Article] { get }
}

class ListArticleInteractor: ListArticleBusinessLogic, ListArticleDataStore {
    var articles: [Article] = []
    var listArticles: [Article]? {
        didSet {
            if let list = listArticles {
                articles = list
            }
        }
    }

    var presenter: ListArticlePresentationLogic?
    var worker: ListArticleWorker?
    var articlesWorker = ArticlesWorker()

    // MARK: List Articles

    func fetchArticles(request: ListArticle.Fetch.Request) {
        articlesWorker.fetch(success: { response in
            self.listArticles = response.articles
            let resp = ListArticle.Fetch.Response(
                articles: self.articles)
            self.presenter?.presentArticles(response: resp)
        }, fail: { error in
            let resp = ListArticle.Fetch.Response(errorMessage: error.errorMessage)
            self.presenter?.presentError(response: resp)
        })
    }

    func filterArticles(request: ListArticle.Fetch.Request) {
        if let filter = request.filter, let listArticles = listArticles {
            if !filter.isEmpty {
                articles = listArticles.filter {
                    $0.title?.lowercased().contains(filter.lowercased()) ?? false ||
                        $0.source?.name?.lowercased().contains(filter.lowercased()) ?? false
                }
            } else {
                articles = listArticles
            }
        }

        let resp = ListArticle.Fetch.Response(
            articles: self.articles)
        self.presenter?.presentArticles(response: resp)
    }
}
