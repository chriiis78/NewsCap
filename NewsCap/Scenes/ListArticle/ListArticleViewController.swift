//
//  ListArticleViewController.swift
//  ListArticleCap
//
//  Created by Chris on 13/05/2020.
//  Copyright (c) 2020 Chris78. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListArticleDisplayLogic: class {
    func displayArticles(viewModel: ListArticle.Fetch.ViewModel)
}

class ListArticleViewController: UITableViewController, ListArticleDisplayLogic, UISearchResultsUpdating {
    var interactor: ListArticleBusinessLogic?
    var router: (NSObjectProtocol & ListArticleRoutingLogic & ListArticleDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ListArticleInteractor()
        let presenter = ListArticlePresenter()
        let router = ListArticleRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    let searchController = UISearchController(searchResultsController: nil)

    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        fetchArticles()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(false)
        tableView.reloadData()
    }

    func setupUI() {
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 270

        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = "Search News"
        navigationItem.searchController = searchController
        definesPresentationContext = true
    }

    // MARK: List Article

    var displayArticles = [ListArticle.Fetch.ViewModel.DisplayArticle]()

    func fetchArticles() {
        let request = ListArticle.Fetch.Request()
        interactor?.fetchArticles(request: request)
    }

    func displayArticles(viewModel: ListArticle.Fetch.ViewModel) {
        displayArticles = viewModel.displayArticles
        tableView.reloadData()
    }

    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayArticles.count
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        print("cellForRowAt")
        if let cell = tableView.dequeueReusableCell(
            withIdentifier: "listArticleCell",
            for: indexPath) as? ListArticleTableViewCell {
            cell.setupData(data: displayArticles[indexPath.row])
            return cell
        }
        return UITableViewCell()
    }

    // MARK: - Search Bar Results Updating

    func updateSearchResults(for searchController: UISearchController) {
        let searchBar = searchController.searchBar
        interactor?.filterArticles(request: ListArticle.Fetch.Request(filter: searchBar.text))
    }

}
