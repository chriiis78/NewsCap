//
//  ShowArticlePresenter.swift
//  NewsCap
//
//  Created by Chris on 14/05/2020.
//  Copyright (c) 2020 Chris78. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowArticlePresentationLogic {
    func presentArticle(response: ShowArticle.GetArticle.Response)
}

class ShowArticlePresenter: ShowArticlePresentationLogic {
    weak var viewController: ShowArticleDisplayLogic?

    // MARK: Present Article

    var dayFormatter: DateFormatter {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .short
        dateFormatter.timeStyle = .none
        return dateFormatter
    }

    var timeFormatter: DateFormatter {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .none
        dateFormatter.timeStyle = .medium
        return dateFormatter
    }

    var dateDeformatter: DateFormatter {
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
        return dateFormatter
    }

    func presentArticle(response: ShowArticle.GetArticle.Response) {
        let title = response.article.title ?? ""
        var publish = ""
        if let date = response.article.publishedAt,
            let deformattedDate = dateDeformatter.date(from: date) {
            let day = dayFormatter.string(from: deformattedDate)
            let time = timeFormatter.string(from: deformattedDate)
            publish = "Publié le : \(day) à \(time)"
        }
        let author = response.article.author.map { "Auteur : \($0)" } ?? ""
        let content = response.article.content ?? ""
        let source = response.article.source?.name ?? ""
        let imageUrl = response.article.urlToImage ?? ""

        let viewModel = ShowArticle.GetArticle.ViewModel(
            imageUrl: imageUrl,
            title: title,
            publish: publish,
            author: author,
            content: content,
            source: source)
        viewController?.displayArticle(viewModel: viewModel)
    }
}
